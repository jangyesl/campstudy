01_프로퍼티 (속성) -객체 안에 저장된 값을 뜻
property는 이름과 값, 메서드를 가진다.
var student ={

    name (프로퍼티 이름):'유관순', //프로퍼티(name) 의 값
    age(프로퍼티 이름):20 (값)
    
};

var key ='test'; //프로퍼티 키를 동적 생성
obj[key]='test value';
console.log(obj);

02 메소드method (동작)
함수 객체. 값으로 취급할 수 있고 프로퍼티 값으로도 사용가능

    var dog1={
        name1:'두리',
        eat:function(food){ //eat는 메소드 이름, function는 메소드 동작//es6의 기능으로 생략도 가능
            console.log(`${this.name1}는 ${food} 먹어요.`);

        }
    };
    dog1.eat('당근절대로 안')

//대괄호 표기법. 키는 반드시 따옴표로 감싼 문자열로 사용
console.log(dog['name']);
dog['eat']('고구마');
console.log(obj['dash-key']);  // 네이밍 규칙 준수해야 나옴. '문자열'[]대괄호 필수
console.log(obj['0']);

//프로퍼티 값을 변경, 추가, 삭제


var dog={  name : '뽀삐'};

//이미 뽀삐라고 주어진 프로퍼티 값을 두부로 변경
dog.name='두부'
console.log(dog);

//프로퍼티 동적 추가
dog.age=3;
console.log(dog);

//프로퍼티 삭제 delete연산자를 사용해서 프로퍼티를 삭제한다.
delete dog.age;
console.log(dog);



함수. 두둥.

//함수 선언문

function hello(name){
    return `${name}님 안녕하세요`;

}
console.log(hello('홍길동'));

//자바 스크립트 엔진은 생성된 함수를 호출하기 위해
//함수 이름과 동일한 식별자를 암묵적으로 생성함
//즉 함수는 함수 이름 

//함수 표현식에서 함수명을 생략해도 됨
var calc =function add(a,b){
    return a+b;
}


//화살표 함수
var message;
//기존 함수 정의
message=function(){
    return 'hello world';

}
console.log(message());

//function 생략 가능
message=() =>{
    return 'Arrow function';
}

//명령문이 하나만 있을 경우 중괄호, return 생략 가능
message =() =>"Arrow Fun";
console.log(message());

message = (val1, val2) => `Arrow fun:${val1+val2}`;

console.log(message(10,20));

//매개변수가 하나면 소괄호도 생략 가능
message = value => `hello ${value}`;

console.log(message('world'));


//function 대신 =>함수 정의할 때 function 빼도 됨
//코드가 한 줄이면 {} 생략 가능



